#pragma once

#include "pch.h"
#include"path_algorithm.h"
#include <iostream>
#include<vector>
#include<algorithm>
class path_algorithm
{
	const std::vector<double> soilder_range{ 100.0,100.0 };
	const double soilder_range = 100.0;
	 double  x_s, y_s;
	 double lenght, width;
     int number_of_solider;
	std::vector<std::vector<double>> coordinates;
	std::vector<std::vector<double>>  graph;
public:
	path_algorithm();
	~path_algorithm();
	void addEdge(std::vector<std::vector<double>> &coordinates, std::vector<std::vector<double>> & graph);
	bool  result();
	


};



#include "pch.h"
#include"path_algorithm.h"
#include <iostream>
#include<vector>
#include<algorithm>

path_algorithm::path_algorithm()
{  //dimension and number of  soliders 
	std::cin >> lenght >> width >> number_of_solider;
    std::cout<<std::endl; 
	//coordinates of the soilders
	for (int i = 1; i <=number_of_solider; i++) 
	{ double x, y; 
	std::cin >> x >> y;
	if((0,0)<=(x,y)<=(lenght,width))
		coordinates.push_back({ x ,y });
	}

	for (double i = 1; i <= number_of_solider; i++) { graph.push_back({ i }); }
	//
	//for (auto x : coordinates) { std::cout << x[0] <<" "<< x[1] << std::endl; }
}


path_algorithm::~path_algorithm()
{
}
void path_algorithm::addEdge(std::vector<std::vector<double>> &coordinates, std::vector<std::vector<double>> & graph)
{

	for (auto one_vertex : coordinates) {
		for (auto each_vertex : coordinates)
		{
			std::vector < double > temp_output;
			temp_output[0] = each_vertex[0] - one_vertex[0];
			temp_output[1] = each_vertex[1] - one_vertex[1];
			double distance=sqrt(pow(temp_output[0], 2) + pow(temp_output[1], 2));
			if (distance <= 200.0) { graph.push_back({ each_vertex }); }
		}
	}

	
}


// Prisoner_s_Problem_Statement.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include "pch.h"
#include"path_algorithm.h"
#include <iostream>
#include<vector>
#include<algorithm>
int main()
{
	path_algorithm obj1;
	return 0; 
}


